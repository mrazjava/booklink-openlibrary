name: release

on:
  release:
    types: [published]

env:
  DOCKER_IMAGE: docker.io/mrazjava/booklink-openlibrary-depot
  ARTIFACT_DIR: release_build

jobs:
  build:
    runs-on: ubuntu-latest
    name: Test and Build
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Evaluate dependency cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: use JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: build JAR
        id: mvn-pkg
        run: |
          mvn -B clean verify package
      - name: upload jar artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT_DIR }}
          path: target/booklink-backend.jar
      - name: upload dockerfile artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT_DIR }}
          path: depot.Dockerfile
  publish:
    runs-on: ubuntu-latest
    name: Package and Release
    needs: build
    steps:
      - name: download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.ARTIFACT_DIR }}
      - name: extract git-tagged version
        id: extract-tagged-version
        run: |
          echo "DOCKER_IMG_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: assemble docker image
        id: dockerize
        run: |
          mkdir -p target
          mv $ARTIFACT_DIR/booklink-backend.jar target/
          mv $ARTIFACT_DIR/Dockerfile .
          docker build -f depot.Dockerfile -t $DOCKER_IMAGE:$DOCKER_IMG_TAG .
      - name: push image to dockerhub
        run: |
          docker login -u ${{ secrets.DOCKERHUB_LOGIN }} -p ${{ secrets.DOCKERHUB_PASSWORD }} docker.io
          docker push $DOCKER_IMAGE:$DOCKER_IMG_TAG
          docker tag $DOCKER_IMAGE:$DOCKER_IMG_TAG $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:latest
